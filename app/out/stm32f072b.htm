<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\stm32f072b.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\stm32f072b.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Aug 27 11:23:31 2020
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; RadioProc &rArr; TunerStartupSeq &rArr; TunerChangeBand &rArr; Elite_CmdChangeBand &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4b]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC1_COMP_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[29]">CEC_CAN_IRQHandler</a> from stm32f0xx_it.o(i.CEC_CAN_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from stm32f0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[22]">I2C1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[23]">I2C2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[c]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[f]">RCC_CRS_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[24]">SPI1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[25]">SPI2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[1e]">TIM14_IRQHandler</a> from stm32f0xx_it.o(i.TIM14_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1f]">TIM15_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[20]">TIM16_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[21]">TIM17_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[18]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[19]">TIM1_CC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1a]">TIM2_IRQHandler</a> from stm32f0xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1b]">TIM3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1c]">TIM6_DAC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1d]">TIM7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[13]">TSC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[26]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[27]">USART2_IRQHandler</a> from stm32f0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[28]">USART3_4_IRQHandler</a> from stm32f0xx_it.o(i.USART3_4_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2a]">USB_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f072xb.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[30]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ae]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1af]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[34]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[39]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1c6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1c7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1c8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1c9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1ca]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1cb]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1cc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1cd]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[31]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[33]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[35]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; RadioProc &rArr; TunerStartupSeq &rArr; TunerChangeBand &rArr; Elite_CmdChangeBand &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[38]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Printf_Conversion
</UL>

<P><STRONG><a name="[1d1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[3c]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2C_TxService
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinUartBaud
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverage_U16
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_GetAverageQuality
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Printf_Conversion
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimeset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadPlayFre
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportDate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeapYear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_In
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureAfList
</UL>

<P><STRONG><a name="[1d6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
</UL>

<P><STRONG><a name="[40]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
</UL>

<P><STRONG><a name="[43]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
</UL>

<P><STRONG><a name="[46]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[45]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
</UL>

<P><STRONG><a name="[1da]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[1db]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
</UL>

<P><STRONG><a name="[1dc]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
</UL>

<P><STRONG><a name="[1dd]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[37]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1de]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1df]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1e0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>ADC_GetData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, swc.o(i.ADC_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_GetData &rArr; IsInArray_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInArray_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyData2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyData
</UL>

<P><STRONG><a name="[50]"></a>AD_SW2_Key_Scan</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, swc.o(i.AD_SW2_Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AD_SW2_Key_Scan &rArr; ReportSWCTable &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportSWCTable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanSwckey
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyData2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyData
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSwc
</UL>

<P><STRONG><a name="[57]"></a>AFCheckInit</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, tuner_elite.o(i.AFCheckInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AFCheckInit &rArr; RDSDataInitPlus &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataInitPlus
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFCheck
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFEnd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFChangeFreq
</UL>

<P><STRONG><a name="[59]"></a>ASProc</STRONG> (Thumb, 2490 bytes, Stack size 40 bytes, radio.o(i.ASProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ASProc &rArr; ReadPresetMem &rArr; ReportRadioPreListinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumInc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChkStat
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOriginalStat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPresetMem
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkupStatNum
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
</UL>

<P><STRONG><a name="[68]"></a>ATProc</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, radio.o(i.ATProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ATProc &rArr; RadSetToDl500ms &rArr; ReportRadioBaseInfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumInc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumDec
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChkStat
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
</UL>

<P><STRONG><a name="[8a]"></a>AdcDeinit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bsp.o(i.AdcDeinit))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>

<P><STRONG><a name="[78]"></a>AdcInit</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, bsp.o(i.AdcInit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[6c]"></a>AfDetProc</STRONG> (Thumb, 634 bytes, Stack size 8 bytes, rds.o(i.AfDetProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AfDetProc &rArr; ReportRadioPreListinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadPlayFre
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioSignalinfo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFCheck
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRdsAFFreq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkupStatNum
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFEnd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFChangeFreq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerReadAFSeekStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
</UL>

<P><STRONG><a name="[17d]"></a>AnalysisCanStr</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, usart4.o(i.AnalysisCanStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AnalysisCanStr
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVM4ArmCanStr
</UL>

<P><STRONG><a name="[1ab]"></a>ArmUartInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, armuart.o(i.ArmUartInit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>BkupStatNum</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio.o(i.BkupStatNum))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtEonTaPi
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtySeekProc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiSeekProc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[75]"></a>BspInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp.o(i.BspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BspInit &rArr; Bsp_UART_Init &rArr; SysUartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time14Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UART_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>Bsp_UART_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(i.Bsp_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Bsp_UART_Init &rArr; SysUartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[80]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, stm32f0xx_can.o(i.CAN_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>CAN_Receive</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32f0xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>CAN_Transmit</STRONG> (Thumb, 308 bytes, Stack size 12 bytes, stm32f0xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2C_TxService
</UL>

<P><STRONG><a name="[29]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, stm32f0xx_it.o(i.CEC_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CEC_CAN_IRQHandler &rArr; Can_Rx_DataPro &rArr; CanPutToBuf &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Rx_DataPro
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>CanPutToBuf</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, mw_can.o(i.CanPutToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CanPutToBuf &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_In
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Rx_DataPro
</UL>

<P><STRONG><a name="[7f]"></a>Can_Rx_DataPro</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mw_can.o(i.Can_Rx_DataPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Can_Rx_DataPro &rArr; CanPutToBuf &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPutToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>ChkNoStat</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, radio.o(i.ChkNoStat))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ck7786StatProc
</UL>

<P><STRONG><a name="[85]"></a>ChkStatExist</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, radio.o(i.ChkStatExist))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ck7786StatProc
</UL>

<P><STRONG><a name="[83]"></a>Ck7786StatProc</STRONG> (Thumb, 516 bytes, Stack size 8 bytes, radio.o(i.Ck7786StatProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Ck7786StatProc &rArr; Wr7786CkStatProc &rArr; Elite_CmdReadSeekStatus &rArr; RDSDataInit &rArr; RDSDataInitPlus &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSGetDataBlock
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFlagPINew
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786CkStatProc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkStatExist
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkNoStat
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
</UL>

<P><STRONG><a name="[89]"></a>CloseExternDevice</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, drive.o(i.CloseExternDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CloseExternDevice &rArr; IrdaDeInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaDeInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Deinit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Deinit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time14Deinit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClkDown
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DeInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GalaDeInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPowerDown
</UL>

<P><STRONG><a name="[93]"></a>ClrKeyInfo</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, swc.o(i.ClrKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ClrKeyInfo &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[164]"></a>ClrRDSParms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, rdsapp.o(i.ClrRDSParms))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInit
</UL>

<P><STRONG><a name="[95]"></a>CoreAccProcess</STRONG> (Thumb, 870 bytes, Stack size 8 bytes, core.o(i.CoreAccProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CoreAccProcess &rArr; CoreFastArm2update &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepWake
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadPwrOff
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportAccState
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteTimeset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPowerDown
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreFastPanel
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreFastBack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreFastArm2update
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UART_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDelay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCore
</UL>

<P><STRONG><a name="[9b]"></a>CoreFastArm2update</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, core.o(i.CoreFastArm2update))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CoreFastArm2update &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[99]"></a>CoreFastBack</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, core.o(i.CoreFastBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CoreFastBack &rArr; ReportFastback &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportFastback
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[9a]"></a>CoreFastPanel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, core.o(i.CoreFastPanel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CoreFastPanel &rArr; ReportControlBackLight &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportControlBackLight
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[ab]"></a>CoreInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, core.o(i.CoreInit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetecBat
</UL>

<P><STRONG><a name="[a8]"></a>CorePowerProcess</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, core.o(i.CorePowerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CorePowerProcess &rArr; ReportMcuPowerinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadPwrOff
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportMcuPowerinfo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteTimeset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOn
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCore
</UL>

<P><STRONG><a name="[137]"></a>CoreTime</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, core.o(i.CoreTime))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCore
</UL>

<P><STRONG><a name="[ae]"></a>CoreWakeupDetect</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, detection.o(i.CoreWakeupDetect))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSignal
</UL>

<P><STRONG><a name="[ad]"></a>DetecAccSignal</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, detection.o(i.DetecAccSignal))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSignal
</UL>

<P><STRONG><a name="[b0]"></a>DetecBackSight</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, detection.o(i.DetecBackSight))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSignal
</UL>

<P><STRONG><a name="[aa]"></a>DetecBat</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, detection.o(i.DetecBat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DetecBat &rArr; MuteTimeset &rArr; MuteOn &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteTimeset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOn
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSignal
</UL>

<P><STRONG><a name="[b1]"></a>DetecBrakeSight</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, detection.o(i.DetecBrakeSight))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSignal
</UL>

<P><STRONG><a name="[b2]"></a>DetecCarILL</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, detection.o(i.DetecCarILL))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSignal
</UL>

<P><STRONG><a name="[113]"></a>DetectInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, detection.o(i.DetectInit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPowerDown
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>DetectSignal</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, detection.o(i.DetectSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DetectSignal &rArr; DetecBat &rArr; MuteTimeset &rArr; MuteOn &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HasAcc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetecCarILL
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetecBrakeSight
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetecBat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetecBackSight
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetecAccSignal
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreWakeupDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>Disable_RDS_Int</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tuner_elite.o(i.Disable_RDS_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Disable_RDS_Int &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteMem
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStartupSeq
</UL>

<P><STRONG><a name="[b9]"></a>DriveInit</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, drive.o(i.DriveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DriveInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimereset
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_1_IRQHandler &rArr; RemoteInt
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteInt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_15_IRQHandler &rArr; RemoteInt
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteInt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaDeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RDS_Int
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI8_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI7_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RDS_Int
</UL>

<P><STRONG><a name="[bb]"></a>EXTI_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>EXTI_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaDeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RDS_Int
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI8_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI7_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RDS_Int
</UL>

<P><STRONG><a name="[b5]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaDeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RDS_Int
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI8_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI7_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RDS_Int
</UL>

<P><STRONG><a name="[be]"></a>Elite_BootcodeDownload</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_BootcodeDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Elite_BootcodeDownload &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Out8Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStartupSeq
</UL>

<P><STRONG><a name="[c2]"></a>Elite_CmdAFCheck</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdAFCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Elite_CmdAFCheck &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFCheck
</UL>

<P><STRONG><a name="[c4]"></a>Elite_CmdAFEnd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdAFEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Elite_CmdAFEnd &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFEnd
</UL>

<P><STRONG><a name="[c5]"></a>Elite_CmdChangeAFFreq</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdChangeAFFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Elite_CmdChangeAFFreq &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFChangeFreq
</UL>

<P><STRONG><a name="[c6]"></a>Elite_CmdChangeBand</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tuner_elite.o(i.Elite_CmdChangeBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Elite_CmdChangeBand &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDelay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadTDSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerChangeBand
</UL>

<P><STRONG><a name="[c9]"></a>Elite_CmdChangeFreq</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdChangeFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Elite_CmdChangeFreq &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDelay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadTDSR
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetFreq
</UL>

<P><STRONG><a name="[ca]"></a>Elite_CmdMuSICA</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdMuSICA))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Elite_CmdMuSICA &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerChangeBand
</UL>

<P><STRONG><a name="[cb]"></a>Elite_CmdReadAFQual</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tuner_elite.o(i.Elite_CmdReadAFQual))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Elite_CmdReadAFQual &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerReadAFSeekStatus
</UL>

<P><STRONG><a name="[cc]"></a>Elite_CmdReadMem</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdReadMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Elite_CmdReadMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIT_ForeceMute
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIT_ForeceMono
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFetchBlockData
</UL>

<P><STRONG><a name="[cd]"></a>Elite_CmdReadSeekStatus</STRONG> (Thumb, 824 bytes, Stack size 112 bytes, tuner_elite.o(i.Elite_CmdReadSeekStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Elite_CmdReadSeekStatus &rArr; RDSDataInit &rArr; RDSDataInitPlus &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786CkStatProc
</UL>

<P><STRONG><a name="[c7]"></a>Elite_CmdReadTDSR</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, tuner_elite.o(i.Elite_CmdReadTDSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Elite_CmdReadTDSR &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdStartup
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeBand
</UL>

<P><STRONG><a name="[d5]"></a>Elite_CmdReadTunerStatus</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdReadTunerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Elite_CmdReadTunerStatus &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_GetAverageQuality
</UL>

<P><STRONG><a name="[d6]"></a>Elite_CmdSeekEnd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdSeekEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Elite_CmdSeekEnd &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
</UL>

<P><STRONG><a name="[d7]"></a>Elite_CmdSetFEReg</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, tuner_elite.o(i.Elite_CmdSetFEReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Elite_CmdSetFEReg &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerChangeBand
</UL>

<P><STRONG><a name="[d8]"></a>Elite_CmdSetSeekTH</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, tuner_elite.o(i.Elite_CmdSetSeekTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Elite_CmdSetSeekTH &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerChangeBand
</UL>

<P><STRONG><a name="[d9]"></a>Elite_CmdStartManualSeek</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdStartManualSeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Elite_CmdStartManualSeek &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOn
</UL>

<P><STRONG><a name="[da]"></a>Elite_CmdStartup</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Elite_CmdStartup &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDelay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadTDSR
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStartupSeq
</UL>

<P><STRONG><a name="[db]"></a>Elite_CmdWriteBeCoeff</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, tuner_elite.o(i.Elite_CmdWriteBeCoeff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Elite_CmdWriteBeCoeff &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerChangeBand
</UL>

<P><STRONG><a name="[b4]"></a>Elite_CmdWriteMem</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdWriteMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RDS_Int
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIT_ForeceMute
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIT_ForeceMono
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RDS_Int
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataInitPlus
</UL>

<P><STRONG><a name="[c3]"></a>Elite_CmdWriteRead</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tuner_elite.o(i.Elite_CmdWriteRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectRead
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdStartup
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteMem
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteBeCoeff
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdStartManualSeek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdSetSeekTH
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdSetFEReg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdSeekEnd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadTunerStatus
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadTDSR
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadMem
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadAFQual
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdMuSICA
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeBand
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeAFFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdAFEnd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdAFCheck
</UL>

<P><STRONG><a name="[dd]"></a>Elite_DirectRead</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, tuner_elite.o(i.Elite_DirectRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Elite_DirectRead &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Out8Bit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3In8Bit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Ack2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStartupSeq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>

<P><STRONG><a name="[dc]"></a>Elite_DirectWrite</STRONG> (Thumb, 354 bytes, Stack size 44 bytes, tuner_elite.o(i.Elite_DirectWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Out8Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteRead
</UL>

<P><STRONG><a name="[e2]"></a>Elite_GetAverageQuality</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, tuner_elite.o(i.Elite_GetAverageQuality))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Elite_GetAverageQuality &rArr; Elite_CmdReadTunerStatus &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadTunerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STChk
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureAfList
</UL>

<P><STRONG><a name="[e3]"></a>Enable_RDS_Int</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tuner_elite.o(i.Enable_RDS_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Enable_RDS_Int &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteMem
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStartupSeq
</UL>

<P><STRONG><a name="[e6]"></a>EonTADetProc</STRONG> (Thumb, 560 bytes, Stack size 8 bytes, rdseon.o(i.EonTADetProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = EonTADetProc &rArr; RDSEonTaSwitchBack &rArr; Radio7786SetFreq &rArr; TunerSetFreq &rArr; Elite_CmdChangeFreq &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataClear
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio7786SetFreq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSTimerInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonTaSwitchBack
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSStart
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
</UL>

<P><STRONG><a name="[f1]"></a>FLASH_if_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash_if.o(i.FLASH_if_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_Init
</UL>

<P><STRONG><a name="[ed]"></a>FLASH_if_ErasePage</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flash_if.o(i.FLASH_if_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_if_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
</UL>

<P><STRONG><a name="[ef]"></a>FLASH_if_Init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, flash_if.o(i.FLASH_if_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_if_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_Unlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
</UL>

<P><STRONG><a name="[111]"></a>FLASH_if_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash_if.o(i.FLASH_if_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
</UL>

<P><STRONG><a name="[112]"></a>FLASH_if_Readhalfword</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_if.o(i.FLASH_if_Readhalfword))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
</UL>

<P><STRONG><a name="[f0]"></a>FLASH_if_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash_if.o(i.FLASH_if_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_Init
</UL>

<P><STRONG><a name="[ee]"></a>FLASH_if_WaitForLastOperation</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, flash_if.o(i.FLASH_if_WaitForLastOperation))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_Writehalfword
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_ErasePage
</UL>

<P><STRONG><a name="[f2]"></a>FLASH_if_Writehalfword</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, flash_if.o(i.FLASH_if_Writehalfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_if_Writehalfword
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
</UL>

<P><STRONG><a name="[e5]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaDeInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Deinit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI8_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI7_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RDS_Int
</UL>

<P><STRONG><a name="[194]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>

<P><STRONG><a name="[8b]"></a>GalaDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.GalaDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>

<P><STRONG><a name="[18a]"></a>GalaInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.GalaInit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
</UL>

<P><STRONG><a name="[f3]"></a>GetAverage_U16</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sch_common.o(i.GetAverage_U16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetAverage_U16
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyData2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyData
</UL>

<P><STRONG><a name="[53]"></a>GetKeyData</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, swc.o(i.GetKeyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetKeyData &rArr; ADC_GetData &rArr; IsInArray_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverage_U16
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SW2_Key_Scan
</UL>

<P><STRONG><a name="[55]"></a>GetKeyData2</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, swc.o(i.GetKeyData2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetKeyData2 &rArr; ADC_GetData &rArr; IsInArray_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverage_U16
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SW2_Key_Scan
</UL>

<P><STRONG><a name="[134]"></a>GetKeyNum</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, swc.o(i.GetKeyNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetKeyNum
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmkey
</UL>

<P><STRONG><a name="[f5]"></a>GetMaxStat</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio.o(i.GetMaxStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetMaxStat
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunParmStartAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumInc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumDec
</UL>

<P><STRONG><a name="[f7]"></a>GetMessage</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sch_message.o(i.GetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetMessage &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2C_TxService
</UL>

<P><STRONG><a name="[5d]"></a>GetRadFreOctData</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, radio.o(i.GetRadFreOctData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetRadFreOctData &rArr; GetMaxStat
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunParmStartAddr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxStat
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePresetMem
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPresetMem
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBandMsg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
</UL>

<P><STRONG><a name="[73]"></a>GetRadPlayFre</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, radio.o(i.GetRadPlayFre))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetRadPlayFre &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunParmStartAddr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786CkStatProc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[6f]"></a>GetRdsAFFreq</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, radio.o(i.GetRdsAFFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetRdsAFFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunParmStartAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[132]"></a>GetSW2StudyKeyNum</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, swc.o(i.GetSW2StudyKeyNum))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[131]"></a>GetSWStudyKeyNum</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, swc.o(i.GetSWStudyKeyNum))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[76]"></a>GpioInit</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, bsp.o(i.GpioInit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[f9]"></a>HITPushToLast</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, tuner_elite.o(i.HITPushToLast))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HITPushToLast &rArr; RDSSetBlockData
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSSetBlockData
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFetchBlockData
</UL>

<P><STRONG><a name="[fb]"></a>HIT_ForeceMono</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tuner_elite.o(i.HIT_ForeceMono))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HIT_ForeceMono &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteMem
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadMem
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
</UL>

<P><STRONG><a name="[fc]"></a>HIT_ForeceMute</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tuner_elite.o(i.HIT_ForeceMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HIT_ForeceMute &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteMem
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadMem
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSProc
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>HasAcc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, detection.o(i.HasAcc))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPanelKey
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSignal
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey
</UL>

<P><STRONG><a name="[e0]"></a>I2C3Ack</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tuner_elite.o(i.I2C3Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C3Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDelay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectRead
</UL>

<P><STRONG><a name="[e1]"></a>I2C3Ack2</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, tuner_elite.o(i.I2C3Ack2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C3Ack2 &rArr; SysWaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDelay10us
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectRead
</UL>

<P><STRONG><a name="[df]"></a>I2C3In8Bit</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, tuner_elite.o(i.I2C3In8Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C3In8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectRead
</UL>

<P><STRONG><a name="[c0]"></a>I2C3Out8Bit</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, tuner_elite.o(i.I2C3Out8Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectRead
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_BootcodeDownload
</UL>

<P><STRONG><a name="[bf]"></a>I2C3Start</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, tuner_elite.o(i.I2C3Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C3Start
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectRead
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_BootcodeDownload
</UL>

<P><STRONG><a name="[c1]"></a>I2C3Stop</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, tuner_elite.o(i.I2C3Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C3Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectRead
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_BootcodeDownload
</UL>

<P><STRONG><a name="[fe]"></a>I2C_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tuner_elite.o(i.I2C_delay))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Stop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Out8Bit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3In8Bit
</UL>

<P><STRONG><a name="[ff]"></a>IR_EXTI7_Config</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, irda.o(i.IR_EXTI7_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IR_EXTI7_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaInit
</UL>

<P><STRONG><a name="[102]"></a>IR_EXTI8_Config</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, irda.o(i.IR_EXTI8_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IR_EXTI8_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaInit
</UL>

<P><STRONG><a name="[105]"></a>InitAMPresetStat</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, radio.o(i.InitAMPresetStat))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPresetStat
</UL>

<P><STRONG><a name="[104]"></a>InitFMPresetStat</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, radio.o(i.InitFMPresetStat))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPresetStat
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtySeekProc
</UL>

<P><STRONG><a name="[103]"></a>InitPresetStat</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, radio.o(i.InitPresetStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = InitPresetStat
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFMPresetStat
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAMPresetStat
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[8e]"></a>IrdaDeInit</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, irda.o(i.IrdaDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IrdaDeInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>

<P><STRONG><a name="[106]"></a>IrdaInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, irda.o(i.IrdaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IrdaInit &rArr; IR_EXTI8_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI8_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI7_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>IsInArray_U8</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, sch_common.o(i.IsInArray_U8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsInArray_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
</UL>

<P><STRONG><a name="[f4]"></a>IsInData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sch_common.o(i.IsInData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsInData
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyData2
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyData
</UL>

<P><STRONG><a name="[108]"></a>IsLeapYear</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drive.o(i.IsLeapYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsLeapYear &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDate
</UL>

<P><STRONG><a name="[1ac]"></a>KeyInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, key.o(i.KeyInit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>KeyScan</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, swc.o(i.KeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KeyScan &rArr; ClrKeyInfo &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEncodekey
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrKeyInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD
</UL>

<P><STRONG><a name="[10b]"></a>KeyTimer</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, swc.o(i.KeyTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEncodekey
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_AD
</UL>

<P><STRONG><a name="[51]"></a>Key_Scan_AD</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, swc.o(i.Key_Scan_AD))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Key_Scan_AD &rArr; KeyScan &rArr; ClrKeyInfo &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTimer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SW2_Key_Scan
</UL>

<P><STRONG><a name="[52]"></a>Key_Scan_AD2</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, swc.o(i.Key_Scan_AD2))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Key_Scan_AD2 &rArr; KeyScan &rArr; ClrKeyInfo &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTimer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SW2_Key_Scan
</UL>

<P><STRONG><a name="[10c]"></a>M2C_TxService</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, app_can.o(i.M2C_TxService))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = M2C_TxService &rArr; GetMessage &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Can_Pro
</UL>

<P><STRONG><a name="[10e]"></a>McuIapStart</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, bsp.o(i.McuIapStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = McuIapStart &rArr; Disable_RDS_Int &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaDeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_Writehalfword
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_Readhalfword
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_Lock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_if_ErasePage
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RDS_Int
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Deinit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time14Deinit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DeInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GalaDeInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDeinit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[a2]"></a>McuPowerDown</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, drive.o(i.McuPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = McuPowerDown &rArr; CloseExternDevice &rArr; IrdaDeInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[114]"></a>MeasureAfList</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, rds.o(i.MeasureAfList))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MeasureAfList &rArr; Elite_GetAverageQuality &rArr; Elite_CmdReadTunerStatus &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_GetAverageQuality
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
</UL>

<P><STRONG><a name="[115]"></a>MessageARMPoweroff</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, core.o(i.MessageARMPoweroff))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MessageARMPoweroff &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepWake
</UL>

<P><STRONG><a name="[116]"></a>MuteOff</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, drive.o(i.MuteOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MuteOff &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMute
</UL>

<P><STRONG><a name="[9c]"></a>MuteOn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drive.o(i.MuteOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MuteOn &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteTimeset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmkey
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorePowerProcess
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetecBat
</UL>

<P><STRONG><a name="[9e]"></a>MuteTimeset</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drive.o(i.MuteTimeset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MuteTimeset &rArr; MuteOn &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOn
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmkey
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorePowerProcess
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetecBat
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaDeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RDS_Int
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI8_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI7_Config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RDS_Int
</UL>

<P><STRONG><a name="[117]"></a>PSProc</STRONG> (Thumb, 760 bytes, Stack size 16 bytes, radio.o(i.PSProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PSProc &rArr; STChk &rArr; ReportRadioBaseInfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIT_ForeceMute
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STChk
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPresetMem
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
</UL>

<P><STRONG><a name="[189]"></a>PSStationChk</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, radio.o(i.PSStationChk))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
</UL>

<P><STRONG><a name="[8c]"></a>PWM_DeInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.PWM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>

<P><STRONG><a name="[79]"></a>PWM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.PWM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>PiSeekProc</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, rds.o(i.PiSeekProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PiSeekProc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOriginalStat
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadDpUpdate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkupStatNum
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
</UL>

<P><STRONG><a name="[11b]"></a>PostMessage</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sch_message.o(i.PostMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PostMessage &rArr; Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_In
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[6a]"></a>Printf</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, sch_printf.o(i.Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Printf_Conversion
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_To_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteTimeset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOn
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorePowerProcess
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessVM4Can
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUart2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMute
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeShow
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadPlayFre
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOff
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetecBat
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVM4ArmCanStr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStartupSeq
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786PllProc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786CkStatProc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSProc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonPiAfInsert
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonElntSearch
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtEonTaPi
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtEonTa
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtPs
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtCT
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBkDRT
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBkCRT
</UL>

<P><STRONG><a name="[11f]"></a>ProcessArmCommand</STRONG> (Thumb, 2394 bytes, Stack size 8 bytes, armuart.o(i.ProcessArmCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ProcessArmCommand &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportMcuPowerinfo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteTimeset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOn
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4SendStr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendStr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLinUartBaud
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetStudyKeyNum
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio7786Poweron
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSWStudyKeyNum
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSW2StudyKeyNum
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadPlayFre
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportSetinfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportSetVolume
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportSWCTable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioSignalinfo
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioArea
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportMcuVisions
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportKeySuccess
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportHandShake
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportFirstBAT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportDate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportChangeSource
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportDeviceStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUart2
</UL>

<P><STRONG><a name="[133]"></a>ProcessArmkey</STRONG> (Thumb, 1190 bytes, Stack size 8 bytes, core.o(i.ProcessArmkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ProcessArmkey &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportAccinfo
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteTimeset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOn
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyNum
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCore
</UL>

<P><STRONG><a name="[136]"></a>ProcessCore</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, core.o(i.ProcessCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ProcessCore &rArr; ProcessArmkey &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmkey
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorePowerProcess
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>ProcessDate</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, drive.o(i.ProcessDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProcessDate &rArr; IsLeapYear &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>ProcessDetect</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, detection.o(i.ProcessDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ProcessDetect &rArr; ReportDeviceStatus &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportDeviceStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>ProcessMute</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, drive.o(i.ProcessMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ProcessMute &rArr; MuteOff &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOff
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>ProcessPanelKey</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, key.o(i.ProcessPanelKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ProcessPanelKey &rArr; ScanKey &rArr; ScanPanelkey &rArr; ReportARM2UPDate &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitKey
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HasAcc
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>ProcessSwc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, swc.o(i.ProcessSwc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ProcessSwc &rArr; AD_SW2_Key_Scan &rArr; ReportSWCTable &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SW2_Key_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>ProcessUart2</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, armuart.o(i.ProcessUart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ProcessUart2 &rArr; ProcessArmCommand &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>ProcessVM4Can</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usart4.o(i.ProcessVM4Can))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ProcessVM4Can &rArr; ReadVM4ArmCanStr &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVM4ArmCanStr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>ProcessVMCan</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usart1.o(i.ProcessVMCan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ProcessVMCan &rArr; ReadArmCanStr &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadArmCanStr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>PtySeekProc</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, rds.o(i.PtySeekProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PtySeekProc &rArr; ReportRadioPreListinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOriginalStat
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFMPresetStat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkupStatNum
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
</UL>

<P><STRONG><a name="[82]"></a>Queue_In</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sch_queue.o(i.Queue_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Queue_In &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostMessage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPutToBuf
</UL>

<P><STRONG><a name="[144]"></a>Queue_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sch_queue.o(i.Queue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBufInit
</UL>

<P><STRONG><a name="[f8]"></a>Queue_Out</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sch_queue.o(i.Queue_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sch_memcpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMessage
</UL>

<P><STRONG><a name="[101]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI8_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI7_Config
</UL>

<P><STRONG><a name="[198]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
</UL>

<P><STRONG><a name="[1a5]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[e4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RDS_Int
</UL>

<P><STRONG><a name="[1a4]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[145]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[193]"></a>RCC_USARTCLKConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_USARTCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>

<P><STRONG><a name="[146]"></a>RDSAfInit</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, rds.o(i.RDSAfInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RDSAfInit
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSAfInitHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
</UL>

<P><STRONG><a name="[147]"></a>RDSAfInitHeader</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rds.o(i.RDSAfInitHeader))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAfMethodB
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAfMethodA
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSAfInit
</UL>

<P><STRONG><a name="[e8]"></a>RDSDataClear</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, rds.o(i.RDSDataClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsRTinfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsPsinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimeset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
</UL>

<P><STRONG><a name="[d4]"></a>RDSDataInit</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, tuner_elite.o(i.RDSDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RDSDataInit &rArr; RDSDataInitPlus &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataInitPlus
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetFreq
</UL>

<P><STRONG><a name="[58]"></a>RDSDataInitPlus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tuner_elite.o(i.RDSDataInitPlus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RDSDataInitPlus &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteMem
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFCheckInit
</UL>

<P><STRONG><a name="[14e]"></a>RDSEonAfInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rdseon.o(i.RDSEonAfInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RDSEonAfInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonPiAfInsert
</UL>

<P><STRONG><a name="[14d]"></a>RDSEonAfInsert</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, rdseon.o(i.RDSEonAfInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RDSEonAfInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonPiAfInsert
</UL>

<P><STRONG><a name="[14a]"></a>RDSEonElntSearch</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rdseon.o(i.RDSEonElntSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RDSEonElntSearch &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtEonTaPi
</UL>

<P><STRONG><a name="[14b]"></a>RDSEonInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rdseon.o(i.RDSEonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RDSEonInit &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
</UL>

<P><STRONG><a name="[14c]"></a>RDSEonPiAfInsert</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, rdseon.o(i.RDSEonPiAfInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RDSEonPiAfInsert &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonAfInsert
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonAfInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtEonAf
</UL>

<P><STRONG><a name="[eb]"></a>RDSEonTaSwitchBack</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rdseon.o(i.RDSEonTaSwitchBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RDSEonTaSwitchBack &rArr; Radio7786SetFreq &rArr; TunerSetFreq &rArr; Elite_CmdChangeFreq &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio7786SetFreq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum1
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
</UL>

<P><STRONG><a name="[14f]"></a>RDSExtAf</STRONG> (Thumb, 230 bytes, Stack size 4 bytes, rds.o(i.RDSExtAf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RDSExtAf &rArr; RDSExtAfMethodB &rArr; RDSInsertAF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAfMethodB
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAfMethodA
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAfHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkC
</UL>

<P><STRONG><a name="[152]"></a>RDSExtAfHeader</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, rds.o(i.RDSExtAfHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RDSExtAfHeader &rArr; RDSInsertAF
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInsertAF
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAf
</UL>

<P><STRONG><a name="[150]"></a>RDSExtAfMethodA</STRONG> (Thumb, 200 bytes, Stack size 12 bytes, rds.o(i.RDSExtAfMethodA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RDSExtAfMethodA &rArr; RDSInsertAF
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInsertAF
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSAfInitHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAf
</UL>

<P><STRONG><a name="[151]"></a>RDSExtAfMethodB</STRONG> (Thumb, 396 bytes, Stack size 12 bytes, rds.o(i.RDSExtAfMethodB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RDSExtAfMethodB &rArr; RDSInsertAF
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInsertAF
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSAfInitHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAf
</UL>

<P><STRONG><a name="[154]"></a>RDSExtBkCRT</STRONG> (Thumb, 550 bytes, Stack size 16 bytes, rds.o(i.RDSExtBkCRT))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RDSExtBkCRT &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsRTinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkC
</UL>

<P><STRONG><a name="[155]"></a>RDSExtBkDRT</STRONG> (Thumb, 666 bytes, Stack size 16 bytes, rds.o(i.RDSExtBkDRT))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RDSExtBkDRT &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsRTinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkD
</UL>

<P><STRONG><a name="[156]"></a>RDSExtBlkB</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, rds.o(i.RDSExtBlkB))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RDSExtBlkB &rArr; RDSExtPty &rArr; ReportRdsPsinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtEonTa
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtTp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtTa
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtPty
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsExtrProc
</UL>

<P><STRONG><a name="[15b]"></a>RDSExtBlkC</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, rds.o(i.RDSExtBlkC))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RDSExtBlkC &rArr; RDSExtBkCRT &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBkCRT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAf
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsExtrProc
</UL>

<P><STRONG><a name="[15c]"></a>RDSExtBlkD</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, rds.o(i.RDSExtBlkD))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RDSExtBlkD &rArr; RDSExtBkDRT &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtEonTaPi
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtEonAf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtPs
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtCT
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBkDRT
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsExtrProc
</UL>

<P><STRONG><a name="[15e]"></a>RDSExtCT</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, rds.o(i.RDSExtCT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RDSExtCT &rArr; ReportDate &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportDate
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkD
</UL>

<P><STRONG><a name="[15f]"></a>RDSExtEonAf</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rdseon.o(i.RDSExtEonAf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RDSExtEonAf &rArr; RDSEonPiAfInsert &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonPiAfInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkD
</UL>

<P><STRONG><a name="[15a]"></a>RDSExtEonTa</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rdseon.o(i.RDSExtEonTa))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RDSExtEonTa &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkB
</UL>

<P><STRONG><a name="[160]"></a>RDSExtEonTaPi</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, rdseon.o(i.RDSExtEonTaPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RDSExtEonTaPi &rArr; RDSEonElntSearch &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkupStatNum
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonElntSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkD
</UL>

<P><STRONG><a name="[176]"></a>RDSExtPi</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, rds.o(i.RDSExtPi))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsExtrProc
</UL>

<P><STRONG><a name="[15d]"></a>RDSExtPs</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, rds.o(i.RDSExtPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RDSExtPs &rArr; ReportRdsPsinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsPsinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkD
</UL>

<P><STRONG><a name="[158]"></a>RDSExtPty</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, rds.o(i.RDSExtPty))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RDSExtPty &rArr; ReportRdsPsinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsPsinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkB
</UL>

<P><STRONG><a name="[159]"></a>RDSExtTa</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, rds.o(i.RDSExtTa))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkB
</UL>

<P><STRONG><a name="[157]"></a>RDSExtTp</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, rds.o(i.RDSExtTp))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkB
</UL>

<P><STRONG><a name="[161]"></a>RDSFetchBlockData</STRONG> (Thumb, 1214 bytes, Stack size 24 bytes, tuner_elite.o(i.RDSFetchBlockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RDSFetchBlockData &rArr; Elite_CmdReadMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSSetDataBlock
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HITPushToLast
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadMem
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsDataDecode
</UL>

<P><STRONG><a name="[88]"></a>RDSFlagPINew</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tuner_elite.o(i.RDSFlagPINew))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ck7786StatProc
</UL>

<P><STRONG><a name="[ec]"></a>RDSFmFreqChange</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, rdsapp.o(i.RDSFmFreqChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RDSFmFreqChange &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataClear
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSTimerInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadDpUpdate
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSStop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSStart
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSAfInit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786PllProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
</UL>

<P><STRONG><a name="[87]"></a>RDSGetDataBlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tuner_elite.o(i.RDSGetDataBlock))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ck7786StatProc
</UL>

<P><STRONG><a name="[12b]"></a>RDSInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rdsapp.o(i.RDSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataClear
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrRDSParms
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSAfInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[153]"></a>RDSInsertAF</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, rds.o(i.RDSInsertAF))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RDSInsertAF
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAfMethodB
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAfMethodA
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtAfHeader
</UL>

<P><STRONG><a name="[bd]"></a>RDSInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tuner_elite.o(i.RDSInt))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>RDSSetBlockData</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, tuner_elite.o(i.RDSSetBlockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RDSSetBlockData
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HITPushToLast
</UL>

<P><STRONG><a name="[162]"></a>RDSSetDataBlock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tuner_elite.o(i.RDSSetDataBlock))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFetchBlockData
</UL>

<P><STRONG><a name="[e9]"></a>RDSStart</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rds.o(i.RDSStart))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
</UL>

<P><STRONG><a name="[163]"></a>RDSStop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rds.o(i.RDSStop))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
</UL>

<P><STRONG><a name="[ea]"></a>RDSTimerInit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, rdsapp.o(i.RDSTimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
</UL>

<P><STRONG><a name="[168]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>RTC_GetITStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>RTC_GetTime</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f0xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeShow
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RTC_IRQHandler &rArr; RTC_TimeShow &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeShow
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>RTC_TimeShow</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc_time.o(i.RTC_TimeShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RTC_TimeShow &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>RadDpUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio.o(i.RadDpUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrafficProc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiSeekProc
</UL>

<P><STRONG><a name="[16a]"></a>RadKyAnaly</STRONG> (Thumb, 3416 bytes, Stack size 24 bytes, radio.o(i.RadKyAnaly))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RadKyAnaly &rArr; RDSFmFreqChange &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsRTinfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsPsinfo
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioSignalinfo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIT_ForeceMute
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIT_ForeceMono
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePresetMem
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumInc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumDec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOriginalStat
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurBandMsg
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPresetMem
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioBreak
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFMPresetStat
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAMPresetStat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkupStatNum
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
</UL>

<P><STRONG><a name="[6b]"></a>RadSetToDl500ms</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, radio.o(i.RadSetToDl500ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RadSetToDl500ms &rArr; ReportRadioBaseInfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSProc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TpSeekProc
</UL>

<P><STRONG><a name="[121]"></a>Radio7786Poweron</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(i.Radio7786Poweron))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[e7]"></a>Radio7786SetFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tuner_elite.o(i.Radio7786SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Radio7786SetFreq &rArr; TunerSetFreq &rArr; Elite_CmdChangeFreq &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786PllProc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonTaSwitchBack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreAfSt
</UL>

<P><STRONG><a name="[16c]"></a>RadioBreak</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, radio.o(i.RadioBreak))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
</UL>

<P><STRONG><a name="[c8]"></a>RadioInit</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, radio.o(i.RadioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteOn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDelay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPresetStat
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmkey
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdStartup
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786PllProc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeBand
</UL>

<P><STRONG><a name="[16f]"></a>RadioProc</STRONG> (Thumb, 696 bytes, Stack size 8 bytes, radio.o(i.RadioProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RadioProc &rArr; TunerStartupSeq &rArr; TunerChangeBand &rArr; Elite_CmdChangeBand &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MuteTimeset
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsRTinfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsPsinfo
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStartupSeq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIT_ForeceMute
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdStartup
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786PllProc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadPwrDn
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STChk
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioBreak
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSProc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ck7786StatProc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>RdsDataDecode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rds.o(i.RdsDataDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RdsDataDecode &rArr; RDSFetchBlockData &rArr; Elite_CmdReadMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFetchBlockData
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsExtrProc
</UL>

<P><STRONG><a name="[175]"></a>RdsExtrProc</STRONG> (Thumb, 694 bytes, Stack size 8 bytes, rds.o(i.RdsExtrProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RdsExtrProc &rArr; RDSExtBlkD &rArr; RDSExtBkDRT &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsDataDecode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtPi
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkD
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkC
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBlkB
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
</UL>

<P><STRONG><a name="[177]"></a>RdsKeyAnaly</STRONG> (Thumb, 930 bytes, Stack size 8 bytes, rdsapp.o(i.RdsKeyAnaly))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = RdsKeyAnaly &rArr; RestoreAfSt &rArr; Radio7786SetFreq &rArr; TunerSetFreq &rArr; Elite_CmdChangeFreq &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsPsinfo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOriginalStat
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurBandMsg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBandMsg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadDpUpdate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkupStatNum
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreAfSt
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
</UL>

<P><STRONG><a name="[17a]"></a>RdsProc</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, rdsapp.o(i.RdsProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RdsProc &rArr; EonTADetProc &rArr; RDSEonTaSwitchBack &rArr; Radio7786SetFreq &rArr; TunerSetFreq &rArr; Elite_CmdChangeFreq &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOriginalStat
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkupStatNum
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrafficProc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TpSeekProc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreAfSt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsExtrProc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtySeekProc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiSeekProc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasureAfList
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>ReadArmCanStr</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usart1.o(i.ReadArmCanStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReadArmCanStr &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessVMCan
</UL>

<P><STRONG><a name="[179]"></a>ReadBandMsg</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, radio.o(i.ReadBandMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadBandMsg &rArr; GetRadFreOctData &rArr; GetMaxStat
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
</UL>

<P><STRONG><a name="[65]"></a>ReadPresetMem</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, radio.o(i.ReadPresetMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadPresetMem &rArr; ReportRadioPreListinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
</UL>

<P><STRONG><a name="[140]"></a>ReadVM4ArmCanStr</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, usart4.o(i.ReadVM4ArmCanStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReadVM4ArmCanStr &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisCanStr
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessVM4Can
</UL>

<P><STRONG><a name="[bc]"></a>RemoteInt</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, irda.o(i.RemoteInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RemoteInt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>RemoteProc</STRONG> (Thumb, 758 bytes, Stack size 24 bytes, irda.o(i.RemoteProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RemoteProc &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEncodekey
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpKyCk
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstRmtDecode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptKyCk
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>ReportARM2UPDate</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, armuart.o(i.ReportARM2UPDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReportARM2UPDate &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanPanelkey
</UL>

<P><STRONG><a name="[9d]"></a>ReportAccState</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, armuart.o(i.ReportAccState))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportAccState &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[135]"></a>ReportAccinfo</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, armuart.o(i.ReportAccinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportAccinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmkey
</UL>

<P><STRONG><a name="[126]"></a>ReportChangeSource</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, armuart.o(i.ReportChangeSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportChangeSource &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[a7]"></a>ReportControlBackLight</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, armuart.o(i.ReportControlBackLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ReportControlBackLight &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreFastPanel
</UL>

<P><STRONG><a name="[129]"></a>ReportDate</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, armuart.o(i.ReportDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReportDate &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtCT
</UL>

<P><STRONG><a name="[125]"></a>ReportDeviceStatus</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, armuart.o(i.ReportDeviceStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReportDeviceStatus &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDetect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[a6]"></a>ReportFastback</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, armuart.o(i.ReportFastback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ReportFastback &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreFastBack
</UL>

<P><STRONG><a name="[12e]"></a>ReportFirstBAT</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, armuart.o(i.ReportFirstBAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportFirstBAT &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[120]"></a>ReportHandShake</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, armuart.o(i.ReportHandShake))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportHandShake &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[128]"></a>ReportKeySuccess</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, armuart.o(i.ReportKeySuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportKeySuccess &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[a9]"></a>ReportMcuPowerinfo</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, armuart.o(i.ReportMcuPowerinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportMcuPowerinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorePowerProcess
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[12d]"></a>ReportMcuVisions</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, armuart.o(i.ReportMcuVisions))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReportMcuVisions &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[122]"></a>ReportRadioArea</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, armuart.o(i.ReportRadioArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportRadioArea &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[64]"></a>ReportRadioBaseInfo</STRONG> (Thumb, 628 bytes, Stack size 64 bytes, armuart.o(i.ReportRadioBaseInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ReportRadioBaseInfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunFMParmStartAddr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunFMORITParmStartAddr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunAMParmStartAddr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmkey
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STChk
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrafficProc
</UL>

<P><STRONG><a name="[62]"></a>ReportRadioPreListinfo</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, armuart.o(i.ReportRadioPreListinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ReportRadioPreListinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSStationChk
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmkey
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePresetMem
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPresetMem
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtySeekProc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[74]"></a>ReportRadioSignalinfo</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, armuart.o(i.ReportRadioSignalinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ReportRadioSignalinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786PllProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[148]"></a>ReportRdsPsinfo</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, armuart.o(i.ReportRdsPsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportRdsPsinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataClear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786PllProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrafficProc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtPty
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtPs
</UL>

<P><STRONG><a name="[149]"></a>ReportRdsRTinfo</STRONG> (Thumb, 116 bytes, Stack size 96 bytes, armuart.o(i.ReportRdsRTinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataClear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786PllProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBkDRT
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtBkCRT
</UL>

<P><STRONG><a name="[54]"></a>ReportSWCTable</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, armuart.o(i.ReportSWCTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ReportSWCTable &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SW2_Key_Scan
</UL>

<P><STRONG><a name="[127]"></a>ReportSetVolume</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, armuart.o(i.ReportSetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportSetVolume &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[12a]"></a>ReportSetinfo</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, armuart.o(i.ReportSetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReportSetinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[a4]"></a>ResetExternDevice</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drive.o(i.ResetExternDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ResetExternDevice &rArr; Bsp_UART_Init &rArr; SysUartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time14Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GalaInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UART_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMCanInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM4CanInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaInit
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[130]"></a>ResetStudyKeyNum</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, swc.o(i.ResetStudyKeyNum))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[178]"></a>RestoreAfSt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rds.o(i.RestoreAfSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RestoreAfSt &rArr; Radio7786SetFreq &rArr; TunerSetFreq &rArr; Elite_CmdChangeFreq &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio7786SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
</UL>

<P><STRONG><a name="[66]"></a>RestoreStatNum</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, radio.o(i.RestoreStatNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RestoreStatNum &rArr; TunerSeekOff &rArr; Elite_CmdSeekEnd &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadPwrDn
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurBandMsg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TpSeekProc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreAfSt
</UL>

<P><STRONG><a name="[6d]"></a>RestoreStatNum1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, radio.o(i.RestoreStatNum1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RestoreStatNum1 &rArr; TunerSeekOff &rArr; Elite_CmdSeekEnd &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSEonTaSwitchBack
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[184]"></a>RptKyCk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, irda.o(i.RptKyCk))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteProc
</UL>

<P><STRONG><a name="[182]"></a>RstRmtDecode</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, irda.o(i.RstRmtDecode))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteProc
</UL>

<P><STRONG><a name="[118]"></a>STChk</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, radio.o(i.STChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = STChk &rArr; ReportRadioBaseInfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_GetAverageQuality
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSProc
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f0xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI8_Config
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_EXTI7_Config
</UL>

<P><STRONG><a name="[16b]"></a>SaveCurBandMsg</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, radio.o(i.SaveCurBandMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SaveCurBandMsg &rArr; RestoreStatNum &rArr; TunerSeekOff &rArr; Elite_CmdSeekEnd &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChgBand
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
</UL>

<P><STRONG><a name="[10a]"></a>SaveEncodekey</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, key.o(i.SaveEncodekey))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteProc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanVolEncodekey
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanSwckey
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saveswckey
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTimer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[192]"></a>SaveLongkeyRelease</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, key.o(i.SaveLongkeyRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SaveLongkeyRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanPanelkey
</UL>

<P><STRONG><a name="[5b]"></a>SaveOriginalStat</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, radio.o(i.SaveOriginalStat))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtySeekProc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiSeekProc
</UL>

<P><STRONG><a name="[18e]"></a>SaveRecombinationkey</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, key.o(i.SaveRecombinationkey))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saveswckey
</UL>

<P><STRONG><a name="[191]"></a>Savekey</STRONG> (Thumb, 424 bytes, Stack size 12 bytes, key.o(i.Savekey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Savekey
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanPanelkey
</UL>

<P><STRONG><a name="[18d]"></a>Saveswckey</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, swc.o(i.Saveswckey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Saveswckey
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveRecombinationkey
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEncodekey
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanSwckey
</UL>

<P><STRONG><a name="[13b]"></a>ScanKey</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, key.o(i.ScanKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ScanKey &rArr; ScanPanelkey &rArr; ReportARM2UPDate &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanVolEncodekey
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanPanelkey
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HasAcc
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPanelKey
</UL>

<P><STRONG><a name="[18f]"></a>ScanPanelkey</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, key.o(i.ScanPanelkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ScanPanelkey &rArr; ReportARM2UPDate &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportARM2UPDate
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Savekey
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLongkeyRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey
</UL>

<P><STRONG><a name="[173]"></a>ScanProc</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, radio.o(i.ScanProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ScanProc &rArr; STChk &rArr; ReportRadioBaseInfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWrPll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSTimerInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumInc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChkStat
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STChk
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BkupStatNum
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
</UL>

<P><STRONG><a name="[56]"></a>ScanSwckey</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, swc.o(i.ScanSwckey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ScanSwckey &rArr; Saveswckey
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEncodekey
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Saveswckey
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SW2_Key_Scan
</UL>

<P><STRONG><a name="[190]"></a>ScanVolEncodekey</STRONG> (Thumb, 232 bytes, Stack size 4 bytes, key.o(i.ScanVolEncodekey))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ScanVolEncodekey
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEncodekey
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey
</UL>

<P><STRONG><a name="[12f]"></a>SetLinUartBaud</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usart1.o(i.SetLinUartBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetLinUartBaud
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[170]"></a>SetRadPwrDn</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, radio.o(i.SetRadPwrDn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetRadPwrDn &rArr; RestoreStatNum &rArr; TunerSeekOff &rArr; Elite_CmdSeekEnd &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
</UL>

<P><STRONG><a name="[a1]"></a>SetRadPwrOff</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, radio.o(i.SetRadPwrOff))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorePowerProcess
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[183]"></a>SpKyCk</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, irda.o(i.SpKyCk))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteProc
</UL>

<P><STRONG><a name="[12c]"></a>StartChgBand</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, radio.o(i.StartChgBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = StartChgBand &rArr; ReportRadioBaseInfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RDS_Int
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioSignalinfo
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RDS_Int
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurBandMsg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBandMsg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
</UL>

<P><STRONG><a name="[60]"></a>StartChkStat</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, radio.o(i.StartChkStat))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
</UL>

<P><STRONG><a name="[5f]"></a>StartWrPll</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, radio.o(i.StartWrPll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StartWrPll &rArr; GetRadFreOctData &rArr; GetMaxStat
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSProc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsKeyAnaly
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtySeekProc
</UL>

<P><STRONG><a name="[69]"></a>StatNumDec</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, radio.o(i.StatNumDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StatNumDec &rArr; GetMaxStat
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunParmStartAddr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxStat
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
</UL>

<P><STRONG><a name="[5c]"></a>StatNumInc</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, radio.o(i.StatNumInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StatNumInc &rArr; GetMaxStat
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunParmStartAddr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxStat
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanProc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
</UL>

<P><STRONG><a name="[1ad]"></a>SwcInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, swc.o(i.SwcInit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>SysDelay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp.o(i.SysDelay))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdStartup
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeBand
</UL>

<P><STRONG><a name="[fd]"></a>SysDelay10us</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.SysDelay10us))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Ack2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Ack
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SysUartInit</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, mw_uart.o(i.SysUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SysUartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USARTCLKConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_UART_Init
</UL>

<P><STRONG><a name="[19a]"></a>SysWait1Us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sch_common.o(i.SysWait1Us))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWaitUs
</UL>

<P><STRONG><a name="[de]"></a>SysWaitUs</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, sch_common.o(i.SysWaitUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysWaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysWait1Us
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3Ack2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectRead
</UL>

<P><STRONG><a name="[92]"></a>SystemClkDown</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, bsp.o(i.SystemClkDown))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>SystemPowerOff</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, drive.o(i.SystemPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemPowerOff &rArr; Uart4Deinit &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Deinit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[96]"></a>SystemPowerOn</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, drive.o(i.SystemPowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemPowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[9f]"></a>SystemSleepWake</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drive.o(i.SystemSleepWake))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemSleepWake &rArr; MessageARMPoweroff &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageARMPoweroff
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[ba]"></a>SystemTimereset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drive.o(i.SystemTimereset))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>SystemTimeset</STRONG> (Thumb, 582 bytes, Stack size 8 bytes, drive.o(i.SystemTimeset))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SystemTimeset &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tuner10msTimer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataClear
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>TASK_Can_Pro</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_can.o(i.TASK_Can_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TASK_Can_Pro &rArr; M2C_TxService &rArr; GetMessage &rArr; Queue_Out &rArr; sch_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2C_TxService
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>TIM14_IRQHandler</STRONG> (Thumb, 280 bytes, Stack size 12 bytes, stm32f0xx_it.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DeInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteInt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
</UL>

<P><STRONG><a name="[17e]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteInt
</UL>

<P><STRONG><a name="[19f]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
</UL>

<P><STRONG><a name="[17f]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteInt
</UL>

<P><STRONG><a name="[180]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteInt
</UL>

<P><STRONG><a name="[19e]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
</UL>

<P><STRONG><a name="[8d]"></a>Time14Deinit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp.o(i.Time14Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>

<P><STRONG><a name="[77]"></a>Time14Init</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, bsp.o(i.Time14Init))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[107]"></a>Timer2Init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, irda.o(i.Timer2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaInit
</UL>

<P><STRONG><a name="[17b]"></a>TpSeekProc</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, rds.o(i.TpSeekProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TpSeekProc &rArr; RadSetToDl500ms &rArr; ReportRadioBaseInfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadSetToDl500ms
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
</UL>

<P><STRONG><a name="[17c]"></a>TrafficProc</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, rds.o(i.TrafficProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TrafficProc &rArr; ReportRadioBaseInfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsPsinfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadDpUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
</UL>

<P><STRONG><a name="[13c]"></a>TransmitKey</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, key.o(i.TransmitKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TransmitKey &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPanelKey
</UL>

<P><STRONG><a name="[188]"></a>TunAMParmStartAddr</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, radio.o(i.TunAMParmStartAddr))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
</UL>

<P><STRONG><a name="[187]"></a>TunFMORITParmStartAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.TunFMORITParmStartAddr))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
</UL>

<P><STRONG><a name="[186]"></a>TunFMParmStartAddr</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, radio.o(i.TunFMParmStartAddr))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
</UL>

<P><STRONG><a name="[f6]"></a>TunParmStartAddr</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, radio.o(i.TunParmStartAddr))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadPlayFre
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumInc
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatNumDec
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRdsAFFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxStat
</UL>

<P><STRONG><a name="[19c]"></a>Tuner10msTimer</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tuner_elite.o(i.Tuner10msTimer))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimeset
</UL>

<P><STRONG><a name="[1a0]"></a>TunerChangeBand</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, tuner_elite.o(i.TunerChangeBand))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TunerChangeBand &rArr; Elite_CmdChangeBand &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdWriteBeCoeff
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdSetSeekTH
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdSetFEReg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdMuSICA
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeBand
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStartupSeq
</UL>

<P><STRONG><a name="[71]"></a>TunerReadAFSeekStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tuner_elite.o(i.TunerReadAFSeekStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TunerReadAFSeekStatus &rArr; Elite_CmdReadAFQual &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadAFQual
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[63]"></a>TunerSeekOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tuner_elite.o(i.TunerSeekOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TunerSeekOff &rArr; Elite_CmdSeekEnd &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdSeekEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786CkStatProc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCurBandMsg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreStatNum1
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ck7786StatProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PtySeekProc
</UL>

<P><STRONG><a name="[5e]"></a>TunerSeekOn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tuner_elite.o(i.TunerSeekOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TunerSeekOn &rArr; Elite_CmdStartManualSeek &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdStartManualSeek
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
</UL>

<P><STRONG><a name="[6e]"></a>TunerSetAFChangeFreq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tuner_elite.o(i.TunerSetAFChangeFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TunerSetAFChangeFreq &rArr; AFCheckInit &rArr; RDSDataInitPlus &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeAFFreq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFCheckInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[70]"></a>TunerSetAFCheck</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tuner_elite.o(i.TunerSetAFCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TunerSetAFCheck &rArr; AFCheckInit &rArr; RDSDataInitPlus &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdAFCheck
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFCheckInit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wr7786PllProc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[72]"></a>TunerSetAFEnd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tuner_elite.o(i.TunerSetAFEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TunerSetAFEnd &rArr; AFCheckInit &rArr; RDSDataInitPlus &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdAFEnd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFCheckInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[16e]"></a>TunerSetFreq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tuner_elite.o(i.TunerSetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TunerSetFreq &rArr; Elite_CmdChangeFreq &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSDataInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdChangeFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio7786SetFreq
</UL>

<P><STRONG><a name="[171]"></a>TunerStartupSeq</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, tuner_elite.o(i.TunerStartupSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TunerStartupSeq &rArr; TunerChangeBand &rArr; Elite_CmdChangeBand &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_RDS_Int
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerChangeBand
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_RDS_Int
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdStartup
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_DirectRead
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_BootcodeDownload
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
</UL>

<P><STRONG><a name="[26]"></a>USART1_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USART2_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f0xx_it.o(i.USART3_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>USART_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Deinit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Deinit
</UL>

<P><STRONG><a name="[197]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Deinit
</UL>

<P><STRONG><a name="[1a3]"></a>USART_DeInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Deinit
</UL>

<P><STRONG><a name="[1a1]"></a>USART_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData_Direct
</UL>

<P><STRONG><a name="[196]"></a>USART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart4Deinit
</UL>

<P><STRONG><a name="[195]"></a>USART_Init</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>

<P><STRONG><a name="[1a2]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData8
</UL>

<P><STRONG><a name="[91]"></a>Uart1Deinit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, bsp.o(i.Uart1Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Uart1Deinit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>

<P><STRONG><a name="[124]"></a>Uart1SendStr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usart1.o(i.Uart1SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart1SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[90]"></a>Uart2Deinit</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, bsp.o(i.Uart2Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>

<P><STRONG><a name="[98]"></a>Uart2Init</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, bsp.o(i.Uart2Init))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
</UL>

<P><STRONG><a name="[a5]"></a>Uart2SendStr</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, armuart.o(i.Uart2SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitKey
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioBaseInfo
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportMcuPowerinfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportFastback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportControlBackLight
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportAccinfo
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportAccState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageARMPoweroff
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreFastArm2update
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportSetinfo
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportSetVolume
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportSWCTable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsRTinfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsPsinfo
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioSignalinfo
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioArea
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportMcuVisions
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportKeySuccess
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportHandShake
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportFirstBAT
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportDate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportChangeSource
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportARM2UPDate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportDeviceStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadArmCanStr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVM4ArmCanStr
</UL>

<P><STRONG><a name="[8f]"></a>Uart4Deinit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp.o(i.Uart4Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Uart4Deinit &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOff
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIapStart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseExternDevice
</UL>

<P><STRONG><a name="[123]"></a>Uart4SendStr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usart4.o(i.Uart4SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart4SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
</UL>

<P><STRONG><a name="[199]"></a>UartBufInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mw_uart.o(i.UartBufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UartBufInit &rArr; Queue_Init &rArr; sch_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
</UL>

<P><STRONG><a name="[1a7]"></a>UartSendData8</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mw_uart.o(i.UartSendData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartSendData8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData_Direct
</UL>

<P><STRONG><a name="[11d]"></a>UartTxData_Direct</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mw_uart.o(i.UartTxData_Direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartTxData_Direct &rArr; UartSendData8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData8
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_To_Buf
</UL>

<P><STRONG><a name="[18c]"></a>VM4CanInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart4.o(i.VM4CanInit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>VMCanInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart1.o(i.VMCanInit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetExternDevice
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>VectorRemap</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp.o(i.VectorRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VectorRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>Wr7786CkStatProc</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, radio.o(i.Wr7786CkStatProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Wr7786CkStatProc &rArr; Elite_CmdReadSeekStatus &rArr; RDSDataInit &rArr; RDSDataInitPlus &rArr; Elite_CmdWriteMem &rArr; Elite_CmdWriteRead &rArr; Elite_DirectWrite &rArr; I2C3Out8Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSeekOff
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadPlayFre
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Elite_CmdReadSeekStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ck7786StatProc
</UL>

<P><STRONG><a name="[172]"></a>Wr7786PllProc</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, radio.o(i.Wr7786PllProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Wr7786PllProc &rArr; Radio7786SetFreq &rArr; TunerSetFreq &rArr; Elite_CmdChangeFreq &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsRTinfo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRdsPsinfo
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioSignalinfo
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerSetAFCheck
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio7786SetFreq
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSFmFreqChange
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
</UL>

<P><STRONG><a name="[16d]"></a>WritePresetMem</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, radio.o(i.WritePresetMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WritePresetMem &rArr; ReportRadioPreListinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRadioPreListinfo
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadFreOctData
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadKyAnaly
</UL>

<P><STRONG><a name="[5a]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, core.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmkey
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorePowerProcess
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreAccProcess
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysUartInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteProc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanPanelkey
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2C_TxService
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TunerStartupSeq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSProc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ck7786StatProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EonTADetProc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDSExtEonAf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsExtrProc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AfDetProc
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = main &rArr; RadioProc &rArr; TunerStartupSeq &rArr; TunerChangeBand &rArr; Elite_CmdChangeBand &rArr; RadioInit &rArr; RDSInit &rArr; RDSDataClear &rArr; ReportRdsRTinfo &rArr; Uart2SendStr &rArr; Printf &rArr; __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorRemap
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VMCanInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VM4CanInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Can_Pro
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimeset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimereset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDelay
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwcInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteProc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RdsProc
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioProc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessVMCan
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessVM4Can
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUart2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSwc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPanelKey
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMute
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDetect
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCore
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrdaInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSignal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoreInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmUartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7e]"></a>sch_memcpy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sch_common.o(i.sch_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sch_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessArmCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Out
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_In
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2C_TxService
</UL>

<P><STRONG><a name="[94]"></a>sch_memset</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, sch_common.o(i.sch_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sch_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2C_TxService
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrKeyInfo
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[166]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>

<P><STRONG><a name="[11c]"></a>Print_To_Buf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sch_printf.o(i.Print_To_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Print_To_Buf &rArr; UartTxData_Direct &rArr; UartSendData8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxData_Direct
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>

<P><STRONG><a name="[11e]"></a>__Printf_Conversion</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, sch_printf.o(i.__Printf_Conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __Printf_Conversion
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>

<P><STRONG><a name="[42]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[41]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
